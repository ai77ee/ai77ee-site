---
import Card from './Card.astro';
import ImageGlow from './ImageGlow.astro';
import RelativeTime from '@yaireo/relative-time';

const relativeTime = new RelativeTime();

interface NonPlaceholderProps {
  isPlaceholder?: false;
  data: {
    song: string | null;
    artist: string | null;
    image: string | null;
  };
  timestamp: number;
  listening: boolean;
}

interface PlaceholderProps {
  isPlaceholder: true;
  data: null;
  listening: null;
  timestamp: null;
}

type Props = NonPlaceholderProps | PlaceholderProps;

// Fetch the initial track for server-side rendering
const fetchRecentTrack = async () => {
  try {
    const baseUrl = import.meta.env.NEXT_PUBLIC_VERCEL_URL;
    const response = await fetch(`${baseUrl}/api/status`);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();

    return {
      isPlaceholder: false,
      data: {
        song: data.song,
        artist: data.artist,
        image: data.image,
      },
      timestamp: data.timestamp,
      listening: data.listening,
    };
  } catch (error) {
    console.error('Failed to fetch recent track:', error);
    return {
      isPlaceholder: true,
      data: null,
      listening: null,
      timestamp: null,
    };
  }
};

const props = await fetchRecentTrack();
---

<Card>
  <h3 class='no-mt'>What's playing?</h3>
  {
    props.isPlaceholder ? (
      <div class='listening-data'>
        <div class='cover-placeholder'>
          <span>?</span>
        </div>
        <div class='song-info'>
          <p class='song-title'>Loading...</p>
          <p class='song-artists'>Loading...</p>
        </div>
        <div class='listening-info'>
          <div class='indicator' />
          <span>Loading...</span>
        </div>
      </div>
    ) : (
      <div class='listening-data'>
        {props.data!.image && (
          <ImageGlow
            data-song-image
            width={96}
            height={96}
            src={props.data!.image}
            alt={`${props.data!.song} by ${props.data!.artist}`}
          />
        )}
        <div class='song-info'>
          <p class='song-title'>{props.data!.song}</p>
          <p class='song-artists'>{props.data!.artist}</p>
        </div>
        <div class='listening-info'>
          <div class='indicator' class:list={{ listening: props.listening }} />
          <span data-listening-status>
            {props.listening
              ? 'Currently Listening'
              : `Listened ${relativeTime.from(new Date(Number(props.timestamp) * 1000))}`}
          </span>
        </div>
      </div>
    )
  }
</Card>

<script>
  import RelativeTime from '@yaireo/relative-time';
  const relativeTime = new RelativeTime();

  const fetchData = async () => {
    // Get DOM Elements
    const songImage =
      document.querySelector<HTMLImageElement>('[data-song-image]');
    const songTitle = document.querySelector<HTMLSpanElement>('.song-title');
    const songArtists =
      document.querySelector<HTMLSpanElement>('.song-artists');
    const listeningStatus = document.querySelector('[data-listening-status]');
    const indicator = document.querySelector<HTMLDivElement>('.indicator');

    // Making sure all elements are not null or missing
    if (
      !songTitle ||
      !songArtists ||
      !listeningStatus ||
      !songImage ||
      !indicator
    ) {
      console.warn('Some elements are still missing...');
      return;
    }

    // Making an API call
    try {
      const response = await fetch(`/api/status?${new Date().getTime()}`);
      const data = await response.json();
      console.log('api response ', data);
      // Updating the DOM
      songImage.src = data.image;
      songImage.alt = `${data.song} by ${data.artist}`;
      songTitle.textContent = data.song || 'Unknown';
      songArtists.textContent = data.artist || 'Unknown';

      if (data.listening) {
        indicator.classList.add('listening');
      } else {
        indicator.classList.remove('listening');
      }

      listeningStatus.textContent = data.listening
        ? 'Currently listening'
        : `Listened ${relativeTime.from(new Date(Number(data.timestamp) * 1000))}`;
    } catch (error) {
      console.error('Failed to fetch now-playing data:', error);
    }
  };

  // Fetch data immediately on page load
  fetchData();

  // Fetch data every 10 seconds
  setInterval(fetchData, 10000);
</script>

<style is:global>
  .listening-data {
    display: flex;
    flex-direction: column;
  }

  .cover-placeholder {
    width: 96px;
    height: 96px;
    background-color: #202020;
    box-shadow: 0 0 25px #202020;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    font-size: 24px;
    color: #fff;
    font-family: 'Geist Mono', monospace;
    font-weight: bold;
  }

  .song-info {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    margin-top: 1rem;
    margin-bottom: 1rem;
  }

  .song-info p {
    margin: 0;
  }

  .song-title {
    font-size: 1.5rem;
    font-weight: bold;
  }

  .listening-info {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: #c7c7c7;
    font-size: 0.925rem;
  }

  .indicator {
    width: 8px;
    height: 8px;
    min-width: 8px;
    min-height: 8px;
    background-color: #c7c7c7;
    position: relative;
    top: 1px;
    border-radius: 50%;
    box-shadow: 0 0 12px #c7c7c7;
  }

  .indicator.listening {
    background-color: #36f443;
    box-shadow: 0 0 12px #36f443;
  }
</style>
