---
import { LastFm } from '@imikailoby/lastfm-ts';
import ImageGlow from './ImageGlow.astro';
import RelativeTime from '@yaireo/relative-time';
import fallbackImage from '../assets/spinner.svg';
import Card from './Card.astro';
const lastFm = new LastFm(import.meta.env.LASTFM_API_KEY);
const relativeTime = new RelativeTime();
---

<Card>
  <h3 class='no-mt'>What's playing?</h3>
  <div class='listening-data' hidden>
    <div class='cover-placeholder'>
      <span class='img-placeholder'>?</span>
      <ImageGlow
        hidden
        data-song-image
        width={96}
        height={96}
        src={fallbackImage}
        alt='Album Artwork'
      />
    </div>
    <div class='song-info'>
      <p id='song-title' class='song-title'>Loading...</p>
      <p id='song-artist' class='song-artists'>Loading...</p>
    </div>
    <div class='listening-info'>
      <div class='indicator'></div>
      <div class='listening-status'>Loading...</div>
    </div>
  </div>
  <div class='loading-state'>
    <p>Loading now playing data...</p>
  </div>
</Card>

<script>
  import RelativeTime from '@yaireo/relative-time';
  const relativeTime = new RelativeTime();

  const fetchData = async () => {
    const listeningData = document.querySelector('.listening-data');
    const loadingState = document.querySelector(
      '.loading-state'
    ) as HTMLElement;

    // Check if elements exist before interacting with them
    if (!listeningData || !loadingState) {
      console.warn('Some elements are missing in the DOM.');
      return;
    }

    try {
      const response = await fetch(`/api/status?${new Date().getTime()}`);
      const data = await response.json();

      // Update the DOM
      const songImage =
        document.querySelector<HTMLImageElement>('[data-song-image]');
      const imgPlaceholder =
        document.querySelector<HTMLSpanElement>('.img-placeholder');
      const songTitle = document.querySelector<HTMLSpanElement>('.song-title');
      const songArtists =
        document.querySelector<HTMLSpanElement>('.song-artists');
      const listeningStatus =
        document.querySelector<HTMLDivElement>('.listening-status');
      const indicator = document.querySelector<HTMLDivElement>('.indicator');

      if (
        songImage &&
        songTitle &&
        songArtists &&
        listeningStatus &&
        indicator
      ) {
        songImage.src = data.image;
        songImage.alt = `${data.song} by ${data.artist}`;
        songTitle.textContent = data.song || 'Unknown';
        songArtists.textContent = data.artist || 'Unknown';

        if (data.listening) {
          indicator.classList.add('listening');
        } else {
          indicator.classList.remove('listening');
        }

        listeningStatus.textContent = data.listening
          ? 'Currently listening'
          : `Listened ${relativeTime.from(new Date(Number(data.timestamp) * 1000))}`;

        // Hide loading state and show listening data
        loadingState.style.display = 'none';
        listeningData.removeAttribute('hidden');
        imgPlaceholder!.style.display = 'none';
        songImage.removeAttribute('hidden');
      }
    } catch (error) {
      console.error('Failed to fetch now-playing data:', error);
      if (loadingState) {
        loadingState.textContent = 'Failed to load now-playing data.';
      }
    }
  };

  // Fetch data immediately on page load
  fetchData();

  // Fetch data every 10 seconds
  setInterval(fetchData, 10000);
</script>
<style is:global>
  .listening-data {
    display: flex;
    flex-direction: column;
  }

  .cover-placeholder {
    width: 96px;
    height: 96px;
    background-color: #202020;
    box-shadow: 0 0 25px #202020;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
    font-size: 24px;
    color: #fff;
    font-family: 'Geist Mono', monospace;
    font-weight: bold;
  }

  .song-info {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    margin-top: 1rem;
    margin-bottom: 1rem;
  }

  .song-info p {
    margin: 0;
  }

  .song-title {
    font-size: 1.5rem;
    font-weight: bold;
  }

  .listening-info {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: #c7c7c7;
    font-size: 0.925rem;
  }

  .indicator {
    width: 8px;
    height: 8px;
    min-width: 8px;
    min-height: 8px;
    background-color: #c7c7c7;
    position: relative;
    top: 1px;
    border-radius: 50%;
    box-shadow: 0 0 12px #c7c7c7;
  }

  .indicator.listening {
    background-color: #36f443;
    box-shadow: 0 0 12px #36f443;
  }
</style>
